#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_SIZE 1024
#define MAX_ARGS 64

void execute_command(char **args) {
    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
    } else if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("execvp");
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        int status;
        waitpid(pid, &status, 0);

        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        }
    }
}

int main() {
    char input[MAX_INPUT_SIZE];
    const char *prompt = "myshell> ";

    while (1) {
        // Prompt user for input
        printf("%s", prompt);
        fflush(stdout);

        if (fgets(input, MAX_INPUT_SIZE, stdin) == NULL) {
            break;
        }

        // Remove newline character
        input[strcspn(input, "\n")] = '\0';

        // Tokenize input by semicolons
        char *token;
        char *commands[MAX_ARGS];
        int num_commands = 0;

        token = strtok(input, ";");
        while (token != NULL && num_commands < MAX_ARGS) {
            commands[num_commands++] = token;
            token = strtok(NULL, ";");
        }

        // Execute each command
        for (int i = 0; i < num_commands; i++) {
            char *args[MAX_ARGS];
            int num_args = 0;

            // Tokenize command by spaces
            token = strtok(commands[i], " ");
            while (token != NULL && num_args < MAX_ARGS) {
                args[num_args++] = token;
                token = strtok(NULL, " ");
            }

            args[num_args] = NULL;  // Set the last element to NULL for execvp

            // Execute the command
            if (num_args > 0) {
                execute_command(args);
            }
        }
    }

    return 0;
}
